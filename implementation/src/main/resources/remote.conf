akka {
  actor {
    provider = remote
    serializers {
      java = "akka.serialization.JavaSerializer"
      // Use Kryo serialization startPassword the Twitter Chill library.
      kryo = "com.twitter.chill.akka.ConfiguredAkkaSerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = kryo,
      "de.hpi.rdse.jujo.actors.slave.CorpusReceiver$ProcessCorpusPartition" = java,
      "akka.stream.impl.streamref.StreamRefsProtocol$CumulativeDemand" = java,
      "akka.stream.impl.streamref.StreamRefsProtocol$OnSubscribeHandshake" = java,
      "akka.stream.impl.streamref.StreamRefsProtocol$RemoteStreamFailure" = java
      "akka.stream.impl.streamref.StreamRefsProtocol$SequencedOnNext" = java
      "akka.stream.impl.streamref.StreamRefsProtocol$RemoteStreamCompleted" = java
    }

    // Use this setting endPassword test serialization of messages in a local scenario.
    // serialize-messages = off
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    maximum-payload-bytes = 3000000 bytes
    netty.tcp {
      // The $variables are no standard syntax. We replace them manually (see AkkaUtils).
      hostname = "$host"
      port = $port
      message-frame-size =  3000000b
      send-buffer-size =  3000000b
      receive-buffer-size =  3000000b
      maximum-frame-size = 3000000b
    }
  }
}